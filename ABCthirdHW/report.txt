Шипиль Анна Александровна БПИ-203
 Отчет по домашней работе 2.
 
1. Описание задания
Начальное условие задачи
 Вариант 12. Животные
- Базовые альтернативы: Рыбы (место проживания – перечислимый тип: река, море, озеро…), Птицы (отношение к перелету: перелетные, остающиеся на зимовку – булевская величина),
Звери (хищники, травоядные, насекомоядные… – перечислимый тип)
- Общие для всех альтернатив переменные: Название – строка символов, Вес в граммах (целое)
- Общая для всех альтернатив функция: Частное от деления суммы кодов названия животного на вес (действительное число)
Обработка данных в контейнере
 Вариант 8. Упорядочить элементы контейнера по возрастанию, используя сортировку с помощью разделения (Quick Sort).
В качестве ключей для сортировки и других действий используются результаты функции, общей для всех альтернатив.

2. Структура изучаемой вычислительной системы
Схема программы
Animal.py -> Bird.py
Animal.py -> Beast.py
Animal.py -> Fish.py
Animal.py -> main.py
Beast.py -> main.py
Fish.py -> main.py
Bird.py -> main.py
QSort.py -> main.py

  Отображение на память содержимого модуля main

Память программы:     | Таблица имен:           |  Память данных:
_____________________________________________________________________________________
main.py               | start                   | time   | time
_____________________________________________________________________________________
def main              | animals                 | list   |  [...]
                      | input_file              | string |  "..."
                      | output                  | string |  "..."
                      | f_out                   | file   | FileName
                      | animal                  | module | Animal.py
_____________________________________________________________________________________
def read_animals      | animals                 | list   |  [...]
                      | f_in                    | file   | FileName
                      | line                    | string | "..."
                      | t                       | string | "..."
                      | label                   | string | "..."
                      | weight                  | int    | <number>
                      | param                   | string | "..."

  Отображение на память содержимого модуля Animal

Память программы:     | Таблица имен:           |  Память данных:
_____________________________________________________________________________________
def __init__          | name                    | string | "..."
                      | weight                  | int    | <number>
_____________________________________________________________________________________
def __gt__            | other                   | Animal | class
_____________________________________________________________________________________
def __lt__            | other                   | Animal | class
_____________________________________________________________________________________
def func              | ans                     | int    |  <number>
                      | i                       | int    |  <number>
                      
  Отображение на память содержимого модуля Bird

Память программы:     | Таблица имен:           |  Память данных:
_____________________________________________________________________________________
def __init__          | name                    | string | "..."
                      | weight                  | int    | <number>
                      | is_migratory            | bool   | true/false
_____________________________________________________________________________________
def type_name 
_____________________________________________________________________________________
def to_string

  Отображение на память содержимого модуля Beast

Память программы:     | Таблица имен:           |  Память данных:
_____________________________________________________________________________________
def __init__          | name                    | string | "..."
                      | weight                  | int    | <number>
                      | type                    | EatingType | enum
_____________________________________________________________________________________
def type_name 
_____________________________________________________________________________________
def to_string                       

  Отображение на память содержимого модуля Fish

Память программы:     | Таблица имен:           |  Память данных:
_____________________________________________________________________________________
def __init__          | name                    | string | "..."
                      | weight                  | int    | <number>
                      | type                    | EatingType | enum
_____________________________________________________________________________________
def type_name 
_____________________________________________________________________________________
def to_string                  

  Отображение на память содержимого модуля QSort

Память программы:     | Таблица имен:           |  Память данных:
_____________________________________________________________________________________
def quick_sort        | animals                 | list   | [...]
                      | cnt                     | int    | <number>
                      | i                       | int    | <number>
                      | j                       | int    | <number>
                      | center                  | Animal | module Animal.py
                      
                      
                      
  Отображение содержимого классов

Класс:                | Таблица имен:           |  Описание:
_____________________________________________________________________________________
Animal                | __init__                | func   | def ...
                      | __gt__                  | func   | def ...
                      | __lt__                  | func   | def ...
                      | func                    | func   | def ...
                      | type_name               | func   | @abstractmethod def ...
                      | to_string               | func   | @abstractmethod def ...
_____________________________________________________________________________________
Bird(Animal)          | __init__                | func   | def ...
                      | type_name               | func   | def ...
                      | to_string               | func   | def ...
_____________________________________________________________________________________
Beast(Animal)         | __init__                | func   | def ...
                      | type_name               | func   | def ...
                      | to_string               | func   | def ...
_____________________________________________________________________________________
Fish(Animal)          | __init__                | func   | def ...
                      | type_name               | func   | def ...
                      | to_string               | func   | def ...


3. Основные характеристики программы:
 - число интерфейсных модулей (заголовочных файлов): 5 - Animal.py - основной интерфейс, Bird.py, Beast.py и Fish.py - заголовочные файлы реализующие интерфейс из Animal.py в соответствующих классах, QSort - модуль с сортировкой
 - и модулей реализации (фалов с определением программных объектов): 1 - сама программа, main.py
 - общий размер исходных текстов программы: 8 КБ (194 строки)
 - время выполнения программы для различных тестовых наборов данных (test0, test1 и manualTestn (n = 1..5) - ручные тесты, остальные сгенирированы программой Generator из предыдущих заданий):
 test1: 0.00099 секунд - 0 объектов
 test7: 0.00100 секунд - 2 объекта
 manualTest2: 0.001 секунд - 3 объекта
 manualTest3: 0.001 секунд - 5 объектов
 manualTest4: 0.001 секунд - 5 объектов
 manualTest5: 0.0011 секунд - 6 объектов
 manualTest1: 0.0012 секунд - 4 объекта
 test0: 0.001 секунд - 9 объектов
 test3: 0.002 секунд - 25 объектов
 test4: 0.003 секунд - 50 объектов
 test6: 0.004 секунд - 52 объекта
 test5: 0.008 секунд - 179 объектов
 test8: 0.020 секунд - 500 объектов
 test9: 0.040 секунд - 1000 объектов
 test10: 0.145 секунд - 2500 объектов
 test11: 0.325 секунд - 5000 объектов
 test2: 0.498 секунд - 10000 объектов

4. Сравнение
Удивительно, но на маленьких тестах это решение работает даже быстрее, чем аналогиченое на С++ (2 задание). На тестах побольше это решение работает медленнее аналогичного на С++.
Решение на С (первое задание) не уступает в скорости новому решению ни на каких тестах.
Это объяснимо: программы на python в принципе работают медленее, чем на большинстве С-подобных языков.
Зато размер исходного кода стал меньше, а также времени на написание программы ушло меньше (на мой взгляд, разработка на python быстрее и проще, но это несколько субъективно,
могу лишь аргументировать тем, что во многих компаниях пишут на python, когда надо быстро написать, и на С++, когда надо, чтобы быстро работало).
Решение на python я бы назвала проще, потому что:
 - Динамическая типизация позволяет, например, использовать сортировку для любых списков (не только определенного типа) без использования шаблонов.
 - Не нужно мучиться с указателями, строками (как в задании 1)
 - Не нужно заранее выделять место в контейнере, можно динамически добавлять новые элементы
 - ООП (например, переопределение операторов, абстрактный класс)
Прихожу к выводу, что третье решение проще писать и рефакторить (добавлять новый функционал), но оно уступает по скорости предыдущим решениям на С и С++.


